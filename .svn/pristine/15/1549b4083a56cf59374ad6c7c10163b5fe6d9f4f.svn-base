<template>
  <div>
    <div class="menu_top">
      <el-input v-model="mevalue" placeholder="请输入菜单名搜索" size="small" style="width:160px"></el-input>
      <el-button type="primary" icon="el-icon-search" size="small" @click="serchMenu">搜索</el-button>
      <el-select v-model="selectvalue" placeholder="请选择" size="small" @change="getSelect" class="select_menu">
        <el-option
          v-for="item in options"
          :key="item.value"
          :label="item.label"
          :value="item.value">
        </el-option>
      </el-select>
      <el-button type="primary"  size="small" style="float:right" @click="openAdd">添加菜单</el-button>
    </div>
    <el-dialog
      title="添加菜单"
      :visible.sync="dialogVisible"
      width="70%">
      <el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px">
        <el-form-item label="菜单名称" prop="menuname" style="width:280x;float:left">
          <el-input v-model="ruleForm.menuname" style="width:180px"></el-input>
        </el-form-item>
        <el-form-item label="菜单链接" prop="url" style="width:280x;float:left">
          <el-input v-model="ruleForm.url" style="width:180px"></el-input>
        </el-form-item>
        <el-form-item label="菜单路径" prop="path" style="width:280x;float:left">
          <el-input v-model="ruleForm.path" style="width:180px"></el-input>
        </el-form-item>
        <el-form-item label="组件名称" prop="component" style="width:280x;float:left">
          <el-input v-model="ruleForm.component" style="width:180px"></el-input>
        </el-form-item>
        <!-- <el-form-item label="父菜单名称" prop="parentmenu"  style="width:280x;float:left">
          <el-input v-model="ruleForm.parentmenu" style="width:180px"></el-input>
        </el-form-item> -->
        <el-form-item label="父菜单名称" prop="parentmenu"  style="width:240x;float:left">
            <el-select v-model="addselectMenu" placeholder="请选择" size="small" @change="addgetSelect" class="select_menu03">
            <el-option
              v-for="item in options"
              :key="item.value"
              :label="item.label"
              :value="item.value">
            </el-option>
          </el-select>
      </el-form-item>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="cancleAddMenu">取 消</el-button>
        <el-button type="primary" @click="sureAddMenu(ruleForm)">确 定</el-button>
      </span>
     </el-dialog>
    <el-table
    :data="tablepage"
    border 
    style="width: 100%">
      <el-table-column
        prop="name"
        label='菜单名称'
        width="180">
      </el-table-column>
      <el-table-column
        prop="url"
        label="组件链接(url)"
        width="180">
      </el-table-column>
      <el-table-column
        prop="path"
        label="组件路径(path)">
      </el-table-column>
      <el-table-column
        prop="component"
        label="组件名称">
      </el-table-column>
      <el-table-column
        prop="iconCls"
        label="Icon">
      </el-table-column>
      <el-table-column
        prop="parentName"
        label="父菜单名称">
      </el-table-column>
      <el-table-column
        prop="seq"
        label="顺序"
        width="60"
        >
      </el-table-column>
    </el-table>
    <div class="table_pagintion">
      <el-pagination
      background
      layout="total,prev, pager, next, jumper"
      :total="alltatol"
      :page-size="7"
      @current-change="getCurrenpage"
      >
      </el-pagination>
    </div>
    
  </div>
</template>

<script>
export default {
  name: "menuManage",
  data() {
    //添加菜单验证reg
    var validateName = (rule, value, callback) => {
        let reg = /^[a-zA-Z0-9\u4E00-\u9FA5]{2,17}$/;
        if (!reg.test(value)) {
          callback(new Error('请输入最长17为字母数字汉字组合字符'));
        } else {
          callback();
        }
      };
      var validateUrl = (rule, value, callback) => {
        let reg = /^\/+$/;
        if (!reg.test(value)) {
          callback(new Error('请输入正确的url'));
        } else {
          callback();
        }
      };
      var validatePath = (rule, value, callback) => {
        let reg = /^\/+[a-zA-Z0-9]{1,15}$/;
        if (!reg.test(value)) {
          callback(new Error('请输入正确的path'));
        } else {
          callback();
        }
      };
      var validateComponent = (rule, value, callback) => {
        let reg = /^[a-zA-Z0-9]{1,15}$/;
        if (!reg.test(value)) {
          callback(new Error('请输入正确的组件名称'));
        } else {
          callback();
        }
      };
      return {
        mevalue:'',
        selectvalue: '',
        tablepage:[],
        pagesize:7,
        alltatol:0,
        dialogVisible:false,
        addselectMenu:'',
        ruleForm: {
          menuname: '',
          url: '',
          path: '',
          component: '',
          parentmenu: '',
        },
        rules: {
           menuname: [{ required: true, validator: validateName, trigger: 'blur' }],
           url: [{ required: true, validator: validateUrl, trigger: 'blur' }],
           path: [{ required: true, validator: validatePath, trigger: 'blur' }],
           component: [{ required: true, validator: validateComponent, trigger: 'blur' }],
           parentmenu: [{ required: true, message: '请输入父菜单名称', trigger: 'blur' }],
         },
        ops:{
          bar: {
          background: "rgba(144,147,153,.3)",
          onlyShowBarOnScroll: false,
          }
        },
        tableData: [],
        options: [],
        
      }
  },
  methods:{
    getSelect (selectvalue) {
      // console.log(this.options[0].label);
      let firstId = selectvalue;
      let data = this.tableData;
      this.tablepage = [];
      let menuArr = [];
      for(let i=0;i<data.length;i++){
        if(data[i].parentId === firstId){
          console.log(data[i])
          this.tablepage.push(data[i]);
        }
      }

    },
    getCurrenpage (page) {
      let start = this.pagesize*(page-1);
      let end = this.pagesize*(page);
      this.tablepage = this.tableData.slice(start,end)
    },
    openAdd () {
      this.dialogVisible =  true;
    },
    // 取消添加菜单
    cancleAddMenu () {
      this.dialogVisible = false;
       this.$message({
          showClose: true,
          message: '已取消添加菜单'
        });
    },
    // 确定菜单添加
    sureAddMenu () {
      let {menuname,url,path,component,parentmenu} = this.ruleForm;
      this.$refs['ruleForm'].validate((valid)=>{
         if(valid){
           this.axios({
             method:'post',
             url:"/menu/addMenuOne",
             params:{
               component:component,
               name:menuname,
               parentId:parentmenu,
               url:url,
               path:path
             }
           }).then(res=>{
             let status = res.data.status;
             if(status === 'success'){
               this.dialogVisible = false
               this.$message({
                  showClose: true,
                  message: '添加菜单成功'
                });
             }
           })
         }else{
            console.log("fail")
         }
      })
    },
    //初始化菜单列表
    initMenuTable ()  {
      let that = this;                                                     
      this.axios({
        method:"get",
        url:"/menu/allMenus"
      }).then(res=>{
        let alldata = res.data;
        // console.log(alldata)s
        for(let i=0;i<alldata.length;i++){
          let {name,url,path,component,iconCls,seq,id} = alldata[i]
          that.options.push({value:id,label:name})
          that.tableData.push({name:name,url:url,path:path,component:component,iconCls:iconCls,parentName:'-',seq:seq});
          for(let j=0;j<alldata[i].children.length;j++){
            let {name,url,path,component,iconCls,seq,parentId,id} = alldata[i].children[j];
            let parentName = alldata[i].name
            that.tableData.push({name:name,url:url,path:path,component:component,iconCls:iconCls,parentName:parentName,parentId:parentId,seq:seq,id:id});
          }
        }
        that.tablepage = that.tableData.slice(0,7);
        that.alltatol = this.tableData.length;
      })
    },
    //菜单搜索
    serchMenu () {
      let name = this.mevalue;
      // let inde = this.tableData.findIndex(el=>el.name === name);
      // let id = this.tableData[inde].id;
      // console.log(id)
      this.axios({
        method:'post',
        url:"/menu/findMenuByName",
        params:{
          name:name
        }
      }).then(res=>{
        let data = res.data.date;
        this.tablepage = [];
        data.forEach((el,index)=> {
          let {name,url,path,component,iconCls,seq} = el
          this.tablepage.push({name:name,url:url,path:path,component:component,iconCls:iconCls,seq:seq}) 
        });
        
      })
    },
    addgetSelect (name) {
      console.log(name)
      this.ruleForm.parentmenu = name
    }
  },
  mounted () {
    let that = this;
    that.initMenuTable();
    // that.alltatol = this.tableData.length;
    // that.tablepage = that.tableData.slice(0,7);
    // console.log(that.tablepage)
  }
}
</script>

<style scoped>
.menu_top{
  width: 100%;
  height: 40px;
  line-height: 40px;
}
.table_pagintion{
  float:right;
  margin-top:10px;
}
.line{
  height:1px;
  width: 100%;
  background: #ccc;
  margin-top: 0px;
}
.label_width{
  display:line-block;
  width: 140px;
  text-align:right
}
.dialog-footer{
  clear:both
}
.select_menu{
  margin-left:30px
}
.select_menu03{
  margin-left:0px
}
</style>

